//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : GruppeC
//  @ File Name : Junction.cpp
//  @ Date : 15.04.2019
//  @ Author : 
//
//

#include "Junction.h"
#include "RoadNetwork.h"
#include "Road.h"
#include <cstring>

Junction::Junction(const Point2D& position, RoadNetwork& network, const char junctionName[])
	: network(&network)
	, location(position)
	, name(nullptr)
{
	this->name = new char[strlen(junctionName) + 1];
	strcpy(name, junctionName);
	network.add(*this);
}

Junction::~Junction()
{
	this->network->remove(*this);
	// TODO: Was machen wir mit den Straﬂen?
	delete[] this->name;
}

RoadNetwork* Junction::getNetwork() const
{
	return this->network;
}

const char* Junction::getName() const
{
	return this->name;
}

Point2D Junction::getLocation() const
{
	return this->location;
}

void Junction::draw(Drawer2D& drawer) const
{
	this->location.draw(drawer);
}

void Junction::save(std::ofstream& outFile)
{
	outFile << "Junction" << ";" // keyword
		<< this->getLocation().getX() << ";" // x-value
		<< this->getLocation().getY() << ";" // y-value
		<< this->getName() << ";"; // junctionName

	//put the inRoads
	outFile << "IN" << ";";
	for(auto const& el : this->inRoads)
	{
		outFile << el->getName() << ";";
	}
	//put the outRoads
	outFile << "OUT" << ";";
	for(auto const& el : this->outRoads)
	{
		outFile << el->getName() << ";";
	}
	outFile << "\n";
}

Junction* Junction::load(std::string line, RoadNetwork* roadn)
{
	string delimiter = ";";
	unsigned int pos = 0;
	std::string token;

	//get X
	pos = line.find(delimiter);
	token = line.substr(0, pos);
	line.erase(0, pos + delimiter.length());
	double x = stod(token);
	cout << "X-Value:" << token << endl;

	//get Y
	pos = line.find(delimiter);
	token = line.substr(0, pos);
	line.erase(0, pos + delimiter.length());
	double y = stod(token);
	cout << "Y-Value:" << token << endl;

	Point2D const* point = new Point2D(x, y);

	//get Name 
	pos = line.find(delimiter);
	token = line.substr(0, pos);
	line.erase(0, pos + delimiter.length());
	cout << "Name:" << token << endl;
	const char* name = token.c_str();

	//create the junction for further use
	//Junction* junction = new Junction(point, roadn, name);
	RoadNetwork rn;
	Point2D p1(100, 120);
	Junction j1(p1, rn, "Hanseplatz");
	while(line != "\n")
	{
		pos = line.find(delimiter);
		token = line.substr(0, pos);
		line.erase(0, pos + delimiter.length());
		cout << "Next:" << token << endl;
	};

	//roadn->add(*junction);
	return &j1;
}

bool Junction::join(Road& road, bool atStart)
{
	if(atStart)
	{
		this->outRoads.push_back(&road);
	}
	else
	{
		this->inRoads.push_back(&road);
	}
	// TODO Test, ob Straﬂe schon angebunden
	return true;
}

bool Junction::disjoin(Road& road, bool atStart)
{
	list<Road*>* pList = &this->inRoads;
	if(atStart)
	{
		pList = &this->outRoads;
	}
	for(list<Road*>::iterator iter = pList->begin(); iter != pList->end(); ++iter)
	{
		if(*iter == &road)
		{
			pList->erase(iter);
			return true;
		}
	}
	return false;
}

